{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1cog-Tt3bbpG83eNm9-MtIHovXYnUhgU-","timestamp":1739236983547}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix"],"metadata":{"id":"BQ9FobWw_Ybz","executionInfo":{"status":"ok","timestamp":1739237025568,"user_tz":300,"elapsed":8299,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"-cC_x90O__bO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1739237050166,"user_tz":300,"elapsed":24593,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"e20cbbc6-502e-4e31-bc87-af5cb3a3d5d3"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load the datasets\n","train_df = pd.read_csv(\"/content/train.csv\")\n","test_df = pd.read_csv(\"/content/test.csv\")"],"metadata":{"id":"pXJMfnwXBGZL","executionInfo":{"status":"ok","timestamp":1739237097240,"user_tz":300,"elapsed":15,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Data visualization\n","plt.figure(figsize=(8,5))\n","sns.countplot(x='Survived', hue='Sex', data=train_df, palette='coolwarm')\n","plt.title('Survival Count by Gender')\n","plt.show()\n","\n","plt.figure(figsize=(8,5))\n","sns.countplot(x='Survived', hue='Pclass', data=train_df, palette='muted')\n","plt.title('Survival Count by Passenger Class')\n","plt.show()\n","\n","plt.figure(figsize=(10,6))\n","sns.histplot(data=train_df, x=\"Age\", hue=\"Survived\", bins=30, kde=True, palette=\"coolwarm\", alpha=0.6)\n","plt.title(\"Age Distribution by Survival Status\")\n","plt.show()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"2CpmrNXjBZVv","executionInfo":{"status":"ok","timestamp":1739237100422,"user_tz":300,"elapsed":1186,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"c7eec018-ff9b-4e24-dbac-d6cb11b89c67"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Extracting and mapping passenger titles before dropping Name\n","def extract_title(df):\n","    df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())\n","    title_map = {\n","        \"Mr\": \"Mr\", \"Miss\": \"Miss\", \"Mrs\": \"Mrs\", \"Master\": \"Master\",\n","        \"Dr\": \"Rare\", \"Rev\": \"Rare\", \"Col\": \"Rare\", \"Major\": \"Rare\", \"Mlle\": \"Rare\", \"Countess\": \"Rare\",\n","        \"Ms\": \"Miss\", \"Lady\": \"Rare\", \"Jonkheer\": \"Rare\", \"Don\": \"Rare\", \"Dona\": \"Rare\", \"Mme\": \"Rare\", \"Capt\": \"Rare\", \"Sir\": \"Rare\"\n","    }\n","    df['Title'] = df['Title'].map(title_map)\n","    return df\n","\n","train_df = extract_title(train_df)\n","test_df = extract_title(test_df)\n","train_df = pd.get_dummies(train_df, columns=['Title'], drop_first=True)\n","test_df = pd.get_dummies(test_df, columns=['Title'], drop_first=True)\n"],"metadata":{"id":"l33NZsREBIOm","executionInfo":{"status":"ok","timestamp":1739237105646,"user_tz":300,"elapsed":47,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Drop irrelevant columns after title extraction\n","passenger_ids = test_df['PassengerId']  # Store PassengerId separately\n","\n","drop_columns = ['PassengerId', 'Name', 'Ticket', 'Cabin']\n","train_df.drop(columns=drop_columns, inplace=True)\n","test_df.drop(columns=['Name', 'Ticket', 'Cabin'], errors='ignore', inplace=True)\n"],"metadata":{"id":"3ccuWsXZBOKR","executionInfo":{"status":"ok","timestamp":1739237108542,"user_tz":300,"elapsed":7,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Handling missing values\n","def preprocess_data(df):\n","    df['Age'].fillna(df['Age'].median(), inplace=True)\n","    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n","    df['Fare'].fillna(df['Fare'].median(), inplace=True)\n","    df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n","    df = pd.get_dummies(df, columns=['Embarked'], drop_first=True)\n","    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n","    return df\n","\n","train_df = preprocess_data(train_df)\n","test_df = preprocess_data(test_df)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K9tqqf9iBQWC","executionInfo":{"status":"ok","timestamp":1739237109619,"user_tz":300,"elapsed":34,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"4666c16d-8810-411a-b1dc-746fecf10ecf"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-7788bdfbc185>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Age'].fillna(df['Age'].median(), inplace=True)\n","<ipython-input-7-7788bdfbc185>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n","<ipython-input-7-7788bdfbc185>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Fare'].fillna(df['Fare'].median(), inplace=True)\n","<ipython-input-7-7788bdfbc185>:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Age'].fillna(df['Age'].median(), inplace=True)\n","<ipython-input-7-7788bdfbc185>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n","<ipython-input-7-7788bdfbc185>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Fare'].fillna(df['Fare'].median(), inplace=True)\n"]}]},{"cell_type":"code","source":["# Align test data columns with training data\n","X = train_df.drop(columns=['Survived'])\n","test_df = test_df.reindex(columns=X.columns, fill_value=0)"],"metadata":{"id":"hv2XQ12CBUix","executionInfo":{"status":"ok","timestamp":1739237112589,"user_tz":300,"elapsed":7,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Splitting data into training and validation sets\n","y = train_df['Survived']\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n"],"metadata":{"id":"hA9jO5w4Bf_W","executionInfo":{"status":"ok","timestamp":1739237113664,"user_tz":300,"elapsed":9,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Handling potential data issues before training\n","X_train.fillna(X_train.median(), inplace=True)\n","X_val.fillna(X_val.median(), inplace=True)"],"metadata":{"id":"nD6sHsTJDzqm","executionInfo":{"status":"ok","timestamp":1739237114749,"user_tz":300,"elapsed":16,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Training a Random Forest model\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"cMF4OaXTB3NL","executionInfo":{"status":"ok","timestamp":1739237116195,"user_tz":300,"elapsed":252,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"5ae167fa-ffd8-42b3-e588-9228f10a8408"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Making predictions\n","y_pred = model.predict(X_val)"],"metadata":{"id":"ZVS_uG9nCfY0","executionInfo":{"status":"ok","timestamp":1739237117465,"user_tz":300,"elapsed":24,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Feature importance analysis\n","feature_importances = pd.DataFrame({'Feature': X.columns, 'Importance': model.feature_importances_})\n","feature_importances = feature_importances.sort_values(by='Importance', ascending=False)\n"],"metadata":{"id":"doikKGG9CwhD","executionInfo":{"status":"ok","timestamp":1739237118912,"user_tz":300,"elapsed":11,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":[" # Evaluating model performance\n","accuracy = accuracy_score(y_val, y_pred)\n","conf_matrix = confusion_matrix(y_val, y_pred)\n","\n","print(f\"Model Accuracy: {accuracy:.4f}\")\n","print(\"Classification Report:\\n\", classification_report(y_val, y_pred))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wTyXDvKGCkas","executionInfo":{"status":"ok","timestamp":1739237120150,"user_tz":300,"elapsed":25,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"2abd03f2-4fe1-41fe-8d95-8282af29b4ab"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Accuracy: 0.8380\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.87      0.86      0.86       105\n","           1       0.80      0.81      0.81        74\n","\n","    accuracy                           0.84       179\n","   macro avg       0.83      0.83      0.83       179\n","weighted avg       0.84      0.84      0.84       179\n","\n"]}]},{"cell_type":"code","source":["# Making predictions for the test dataset and saving to CSV\n","test_df = test_df.reindex(columns=X.columns, fill_value=0)  # Ensure test_df matches training features\n","test_df['Survived'] = model.predict(test_df)\n","submission = pd.DataFrame({'PassengerId': passenger_ids, 'Survived': test_df['Survived']})\n","submission.to_csv(\"titanic_submission.csv\", index=False)\n","\n"],"metadata":{"id":"Dg1vhKwzUD7p","executionInfo":{"status":"ok","timestamp":1739237122487,"user_tz":300,"elapsed":33,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Add predictions as a new column 'Predicted_Survived' to training data\n","train_df['Predicted_Survived'] = model.predict(X)\n","\n","# Save the complete training data with actual and predicted values\n","train_df.to_csv('train_with_predictions.csv', index=False)"],"metadata":{"id":"EGOz0eg-nI93","executionInfo":{"status":"ok","timestamp":1739237137054,"user_tz":300,"elapsed":44,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","files.download(\"titanic_submission.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"d8z4o19YY5Z5","executionInfo":{"status":"ok","timestamp":1739237123691,"user_tz":300,"elapsed":12,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"2e9aae09-85ac-41fb-c22f-e29896bbebc4"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_983bc062-51bd-4e47-a5a7-32f55cb1e885\", \"titanic_submission.csv\", 2839)"]},"metadata":{}}]},{"cell_type":"code","source":["# Add predictions as a new column 'Predicted_Survived' to training data\n","train_df['Predicted_Survived'] = model.predict(X)\n","\n","# Save the complete training data with actual and predicted values\n","train_df.to_csv('train_with_predictions.csv', index=False)"],"metadata":{"id":"AezBfk_ih8lF","colab":{"base_uri":"https://localhost:8080/","height":211},"executionInfo":{"status":"error","timestamp":1739236936303,"user_tz":300,"elapsed":122,"user":{"displayName":"Harrison Lamnin","userId":"17250099202495188691"}},"outputId":"72ecfaac-1a15-4f06-fb8f-4d50f33beb49"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-c527cab62e87>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Add predictions as a new column 'Predicted_Survived' to training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtrain_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Predicted_Survived'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Save the complete training data with actual and predicted values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'train_with_predictions.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9O7Krw8MmT_n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"a2tAWGFsh9Pi"},"execution_count":null,"outputs":[]}]}